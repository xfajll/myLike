one example:
# !/usr/bin/python
# -*- coding:utf-8 -*-
'''
 @Author: kick
 @Email: kick.h.liu@mail.foxconn.com
 @FileName: otastartUI.py
 @DateTime: 2022/9/19
 @SoftWare: PyCharm
'''
import sys
import cgitb

from PyQt5.QtCore import Qt, QPoint, QTimer
from PyQt5.QtGui import QPaintEvent, QPainter, QMouseEvent, QFont
from PyQt5.QtWidgets import QApplication, QWidget, QStyleOption, QStyle, QLabel, QPushButton, \
    QMessageBox

from modules.ToolUI.CPKbyConfig.CPKByConfigUI import CPKByConfigUI
from modules.ToolUI.GetConfigCsv.getConfigCsvUi import GetConfigCsv
from modules.ToolUI.GoldenTool.goldenTool import GoldenToolUI
from modules.ToolUI.ItemSelectTool.itemSelectToolUi import ItemSelectTool
from modules.ToolUI.Limits2Tool.Limits2ToolUi import Limits2Tool
from modules.ToolUI.MatrixTool.matrixTool import MatrixTool
from modules.ToolUI.MultiPortTool.multiPortTool import MultiPortTool
from modules.ToolUI.SnLoop.SnLoop import SnLoop
from modules.ToolUI.SplitStation.splitStation import SplitStation
from modules.ToolUI.VswrTool.VswrToolUi import VswrTool
from modules.ToolUI.otaortQss import otaortqss
from modules.ToolUI.audit.auditUI import AuditUI
from modules.ToolUI.mergeCsv.MergeCsvUI import MergeCsvUI
from modules.ToolUI.combineCsv.CombinCsvUI import CombinCsvUI
from modules.ToolUI.otaDailyReport.OtaDailyReport import OtaDailyReportUI
from modules.PermissionInterface import PermissionInterface

from modules.ToolUI.dpi import WindowsCommon

cgitb.enable(format='text')


class OTAORTUI(QWidget):
    screenwidth, screenheight = WindowsCommon.getScreenResolution()
    # screenwidth, screenheight = 5120, 2880
    _startPos = None
    _endPos = None
    _isTracking = False

    _isDragDown = False
    _dragPosition = 0
    _width = 0
    _height = 0
    _x = 0
    _y = 0

    def __init__(self):
        super(OTAORTUI, self).__init__()
        self._padding = 5
        # self.setFixedSize(1166, 890)
        permission = PermissionInterface()
        self.permission_dict = permission.get_permission_info()
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setMouseTracking(True)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setWindowTitle('OTA Report Tool')
        self.setStyleSheet(otaortqss)
        if self.permission_dict['name'] == 'NORMAL':
            self.initUI()
            self.init_parametes()
            self.show()
        else:
            self.bullet(windows_title='display', message=self.permission_dict['display'])

    def bullet(self, windows_title=None, message=None):
        message_box = QMessageBox.information(self, windows_title, message, QMessageBox.Ok)
        if message_box == 1024:
            self.timer = QTimer(self)
            self.timer.timeout.connect(self.close)
            self.timer.start(2)

    def initUI(self):
        self.setObjectName('main')
        btnfont = QFont()
        btnfont.setFamily('Microsoft JhengHei')
        btnfont.setBold(True)
        btnfont.setPixelSize(int(self.screenwidth * (15 / 1920)))

        self.header_widget = QWidget(self)
        self.header_widget.setObjectName('header')
        self.initHeader()

        self.btn_widget = QWidget(self)
        self.btn_widget.setObjectName('btn_widget')
        self.initBtn()

        self.text_widget = QWidget(self)
        self.text_widget.setObjectName('text_widget')
        self.initTextUI()

        self.bottom_widget = QWidget(self)
        self.bottom_widget.setObjectName('bottom_widget')
        self.exit_btn = QPushButton('Exit', self.bottom_widget)
        self.exit_btn.setObjectName('exit')
        self.exit_btn.setFont(btnfont)
        # self.exit_btn.setMinimumSize(120, 40)
        self.exit_btn.clicked.connect(self.close)

    def initHeader(self):

        self.vesion_label = QLabel(self.header_widget)
        self.vesion_label.setObjectName('vesion_label')
        # self.vesion_label.setFixedSize(152, 24)

        self.title_label = QLabel(self.header_widget)
        self.title_label.setObjectName('title_label')
        # self.title_label.setFixedSize(502, 38)

        self.min_btn = QPushButton(self.header_widget)
        self.min_btn.setObjectName('min_btn')
        # self.min_btn.setFixedSize(20, 3)
        self.min_btn.clicked.connect(self.on_minimiz_clicked)

        self.min_max_btn = QPushButton(self.header_widget)
        self.min_max_btn.setObjectName('min_max_btn')
        # self.min_max_btn.setFixedSize(24, 24)
        self.min_max_btn.clicked.connect(self.slot_max_or_recv)

        self.close_btn = QPushButton(self.header_widget)
        self.close_btn.setObjectName('close_btn')
        # self.close_btn.setFixedSize(37, 37)
        self.close_btn.clicked.connect(self.close)

    def initBtn(self):
        btn_font = QFont()
        btn_font.setFamily('Microsoft JhengHei')
        btn_font.setBold(True)
        btn_font.setWeight(75)
        btn_font.setPixelSize(int(self.screenwidth * (19 / 1920)))

        self.sn_tool_button = QPushButton('Audit', self.btn_widget)
        self.sn_tool_button.setObjectName('btn1')
        self.sn_tool_button.setFont(btn_font)
        # self.sn_tool_button.setMinimumSize(260, 40)
        self.sn_tool_button.clicked.connect(self.show_audit)
        # self.btn_layout.addWidget(self.sn_tool_button, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.merge_csv_button = QPushButton('Merge Csv', self.btn_widget)
        self.merge_csv_button.setObjectName('btn1')
        self.merge_csv_button.setFont(btn_font)
        # self.merge_csv_button.setMinimumSize(260, 40)
        self.merge_csv_button.clicked.connect(self.show_merge_csv)
        # self.btn_layout.addWidget(self.merge_csv_button, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.combine_button = QPushButton('Combine CSV', self.btn_widget)
        self.combine_button.setObjectName('btn1')
        self.combine_button.setFont(btn_font)
        # self.combine_button.setMinimumSize(260, 40)
        self.combine_button.clicked.connect(self.show_combin_csv)
        # self.btn_layout.addWidget(self.combine_button, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.daily_report_button = QPushButton('Daily Report', self.btn_widget)
        self.daily_report_button.setObjectName('btn1')
        self.daily_report_button.setFont(btn_font)
        # self.daily_report_button.setMinimumSize(260, 40)
        self.daily_report_button.clicked.connect(self.show_daily_report)
        # self.btn_layout.addWidget(self.daily_report_button, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.by_config_button = QPushButton('CPK By Config Tool', self.btn_widget)
        self.by_config_button.setObjectName('btn1')
        self.by_config_button.setFont(btn_font)
        # self.by_config_button.setMinimumSize(260, 40)
        self.by_config_button.clicked.connect(self.show_cpk_by_config)
        # self.btn_layout.addWidget(self.by_config_button, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.matrix_btn = QPushButton('Matrix Tool', self.btn_widget)
        self.matrix_btn.setObjectName('btn1')
        self.matrix_btn.setFont(btn_font)
        # self.matrix_btn.setMinimumSize(260, 40)
        self.matrix_btn.clicked.connect(self.show_matrix_ui)
        # self.btn_layout.addWidget(self.matrix_btn, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.multi_btn = QPushButton('Multi-Port Tool', self.btn_widget)
        self.multi_btn.setObjectName('btn1')
        self.multi_btn.setFont(btn_font)
        # self.multi_btn.setMinimumSize(260, 40)
        self.multi_btn.clicked.connect(self.show_multi_port)
        # self.btn_layout.addWidget(self.multi_btn, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.golden_btn = QPushButton('Golden Tool', self.btn_widget)
        self.golden_btn.setObjectName('btn1')
        self.golden_btn.setFont(btn_font)
        # self.golden_btn.setMinimumSize(260, 40)
        self.golden_btn.clicked.connect(self.show_golden_ui)
        # self.btn_layout.addWidget(self.golden_btn, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.configCSV = QPushButton('Get Config CSV', self.btn_widget)
        self.configCSV.setObjectName('btn1')
        self.configCSV.setFont(btn_font)
        # self.configCSV.setMinimumSize(260, 40)
        self.configCSV.clicked.connect(self.show_get_config_csv)
        # self.btn_layout.addWidget(self.configCSV, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.itemselect_btn = QPushButton('ItemSelect Tool', self.btn_widget)
        self.itemselect_btn.setObjectName('btn1')
        self.itemselect_btn.setFont(btn_font)
        # self.itemselect_btn.setMinimumSize(260, 40)
        self.itemselect_btn.clicked.connect(self.show_item_select)
        # self.btn_layout.addWidget(self.itemselect_btn, 0, Qt.AlignCenter|Qt.AlignCenter)

        # self.cuttime_btn = QPushButton('Cuttime Tool', self.btn_widget)
        # self.cuttime_btn.setObjectName('btn1')
        # self.cuttime_btn.setFont(btn_font)
        # self.cuttime_btn.setFixedSize(260, 40)
        # self.btn_layout.addWidget(self.cuttime_btn)

        self.split_station_btn = QPushButton('Split Station', self.btn_widget)
        self.split_station_btn.setObjectName('btn1')
        self.split_station_btn.setFont(btn_font)
        # self.split_station_btn.setMinimumSize(260, 40)
        self.split_station_btn.clicked.connect(self.show_split_station)
        # self.btn_layout.addWidget(self.split_station_btn, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.limit2_button = QPushButton('Limits2 Tool', self.btn_widget)
        self.limit2_button.setObjectName('btn1')
        self.limit2_button.setFont(btn_font)
        # self.limit2_button.setMinimumSize(260, 40)
        self.limit2_button.clicked.connect(self.show_limits2_ui)
        # self.btn_layout.addWidget(self.limit2_button, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.sn_loop = QPushButton('Sn Loop', self.btn_widget)
        self.sn_loop.setObjectName('btn1')
        self.sn_loop.setFont(btn_font)
        # self.sn_loop.setMinimumSize(260, 40)
        self.sn_loop.clicked.connect(self.show_sn_loop)
        # self.btn_layout.addWidget(self.sn_loop, 0, Qt.AlignCenter|Qt.AlignCenter)

        self.vswr_button = QPushButton('Vswr Tool', self.btn_widget)
        self.vswr_button.setObjectName('btn1')
        self.vswr_button.setFont(btn_font)
        # self.vswr_button.setMinimumSize(260, 40)
        self.vswr_button.clicked.connect(self.show_ort_vswr)
        # self.btn_layout.addWidget(self.vswr_button, 0, Qt.AlignCenter|Qt.AlignCenter)

        # self.pu_button = QPushButton('Pathloss Update', self.btn_widget)
        # self.pu_button.setObjectName('btn1')
        # self.pu_button.setFont(btn_font)
        # self.pu_button.setFixedSize(260, 40)
        # self.btn_layout.addWidget(self.pu_button)

    def initTextUI(self):
        self.display_widget = QWidget(self)
        self.display_widget.setObjectName('display_widget')

        self.department_name = QLabel(self.display_widget)
        self.department_name.setObjectName('department_name')
        # self.department_name.setFixedSize(625, 22)

        self.config_label = QLabel(self.display_widget)
        self.config_label.setObjectName('config_label')
        # self.config_label.setFixedSize(678, 464)

        self.log_label = QLabel(self.display_widget)
        self.log_label.setObjectName('log_label')
        # self.log_label.setFixedSize(535, 535)

    def init_parametes(self):
        ''''''
        button = self.permission_dict['display_button']
        for push_btn in self.btn_widget.findChildren(QPushButton):
            if push_btn.text() not in button:
                push_btn.setEnabled(False)
                push_btn.setStyleSheet('''
                    QPushButton{background: rgba(204, 204, 204, 1);color: rgba(153, 153, 153, 1);border-radius: 20px;}''')
            else:
                pass

    def show_audit(self):
        self.hide()
        self.audit = AuditUI(self)

    def show_merge_csv(self):
        self.hide()
        self.merge_csv = MergeCsvUI(self)

    def show_combin_csv(self):
        self.hide()
        self.combine_csv = CombinCsvUI(self)

    def show_daily_report(self):
        self.hide()
        self.daily_report = OtaDailyReportUI(self)

    def show_cpk_by_config(self):
        self.hide()
        self.cpk_byconfig = CPKByConfigUI(self)

    def show_matrix_ui(self):
        self.hide()
        self.matrix_ui = MatrixTool(self)

    def show_multi_port(self):
        self.hide()
        self.multi_port_ui = MultiPortTool(self)

    def show_golden_ui(self):
        self.hide()
        self.golden = GoldenToolUI(self)

    def show_get_config_csv(self):
        self.hide()
        self.get_config_csv = GetConfigCsv(self)

    def show_item_select(self):
        self.hide()
        self.item_select = ItemSelectTool(self)

    def show_split_station(self):
        self.hide()
        self.split_station = SplitStation(self)

    def show_limits2_ui(self):
        self.hide()
        self.limit2_ui = Limits2Tool(self)

    def show_sn_loop(self):
        self.hide()
        self.sn_loop_ui = SnLoop(self)

    def show_ort_vswr(self):
        self.hide()
        self.vswr = VswrTool(self)

    def on_minimiz_clicked(self):
        self.showMinimized()

    def slot_max_or_recv(self):
        if self.isMaximized():
            self.showNormal()
        else:
            self.showMaximized()

    def resizeEvent(self, QResizeEvent):
        self.move(self.screenwidth * 0.1, self.screenheight * 0.1)
        self.setFixedSize(int(self.screenwidth * (1166 / 1920)), int(self.screenheight * (890 / 1080)))
        width, height = self.width(), self.height()

        self.header_widget.setGeometry(0, 0, width, int(height * 0.067))
        self.vesion_label.setGeometry(int(width * 0.0185), int(height * 0.02), int(width * 0.1303),
                                      int(height * 0.0269))
        self.title_label.setGeometry(int(width * 0.286), int(height * 0.012), int(width * 0.4305),
                                     int(height * 0.04269))
        self.min_btn.setGeometry(int(width * 0.855), int(height * 0.031), int(width * 0.0171), int(height * 0.00337))
        self.min_max_btn.setGeometry(int(width * 0.896), int(height * 0.022), int(width * 0.0205), int(height * 0.0269))
        self.close_btn.setGeometry(int(width * 0.937), int(height * 0.013), int(width * 0.03173), int(height * 0.04157))

        self.btn_widget.setGeometry(0, int(height * 0.07), int(width * 0.240), int(height * 0.863))
        self.sn_tool_button.setGeometry(int(width * 0.012), int(height * 0.01123 * 1.15), int(width * 0.2229),
                                        int(height * 0.04494))
        self.merge_csv_button.setGeometry(int(width * 0.012), int(height * 0.06404 * 1.15), int(width * 0.2229),
                                          int(height * 0.04494))
        self.combine_button.setGeometry(int(width * 0.012), int(height * 0.11685 * 1.15), int(width * 0.2229),
                                        int(height * 0.04494))
        self.daily_report_button.setGeometry(int(width * 0.012), int(height * 0.1696 * 1.15), int(width * 0.2229),
                                             int(height * 0.04494))
        self.by_config_button.setGeometry(int(width * 0.012), int(height * 0.2224 * 1.15), int(width * 0.2229),
                                          int(height * 0.04494))
        self.matrix_btn.setGeometry(int(width * 0.012), int(height * 0.2752 * 1.15), int(width * 0.2229),
                                    int(height * 0.04494))
        self.multi_btn.setGeometry(int(width * 0.012), int(height * 0.32808 * 1.15), int(width * 0.2229),
                                   int(height * 0.04494))
        self.golden_btn.setGeometry(int(width * 0.012), int(height * 0.3808 * 1.15), int(width * 0.2229),
                                    int(height * 0.04494))
        self.configCSV.setGeometry(int(width * 0.012), int(height * 0.4337 * 1.15), int(width * 0.2229),
                                   int(height * 0.04494))
        self.itemselect_btn.setGeometry(int(width * 0.012), int(height * 0.4865 * 1.15), int(width * 0.2229),
                                        int(height * 0.04494))
        self.split_station_btn.setGeometry(int(width * 0.012), int(height * 0.5393 * 1.15), int(width * 0.2229),
                                           int(height * 0.04494))
        self.limit2_button.setGeometry(int(width * 0.012), int(height * 0.5921 * 1.15), int(width * 0.2229),
                                       int(height * 0.04494))
        self.sn_loop.setGeometry(int(width * 0.012), int(height * 0.6449 * 1.15), int(width * 0.2229),
                                 int(height * 0.04494))
        self.vswr_button.setGeometry(int(width * 0.012), int(height * 0.69775 * 1.15), int(width * 0.2229),
                                     int(height * 0.04494))

        self.text_widget.setGeometry(int(width * 0.244), int(height * 0.07), int(width * 0.758), int(height * 0.863))
        self.display_widget.setGeometry(int(width * 0.263), int(height * 0.078), int(width * 0.72), int(height * 0.85))
        self.department_name.setGeometry(int(width * 0.068), int(height * 0.065), int(width * 0.536),
                                         int(height * 0.0247))
        self.config_label.setGeometry(int(width * 0.068), int(height * 0.140), int(width * 0.5814),
                                      int(height * 0.5213))
        self.log_label.setGeometry(int(width * 0.130), int(height * 0.124), int(width * 0.4588), int(height * 0.6011))

        self.bottom_widget.setGeometry(0, int(height * 0.936), width, int(height * 0.067))
        self.exit_btn.setGeometry(int(width * 0.072), int(height * 0.009), int(width * 0.1029), int(height * 0.0449))

    def paintEvent(self, a0: QPaintEvent) -> None:
        opt = QStyleOption()
        opt.initFrom(self)
        painter = QPainter(self)
        self.style().drawPrimitive(QStyle.PE_Widget, opt, painter, self)

    def mouseMoveEvent(self, e: QMouseEvent):
        if self._isTracking:
            self._endPos = e.pos() - self._startPos
            self.move(self.pos() + self._endPos)

    def mousePressEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = True
            self._startPos = QPoint(e.x(), e.y())
        else:
            self._isTracking = False

        if self.isMaximized():
            self._isTracking = False
            self._startPos = None
            self._endPos = None

    def mouseReleaseEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = False
            self._startPos = None
            self._endPos = None


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ui = OTAORTUI()
    sys.exit(app.exec_())



2.表格滑轮自定义：
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Time      : 2022/8/29 上午 09:07
# @Author   : ghost(fan.xia)
# @Email    : ghost.f.xia@mail.foxconn.com
# File      : DesenseQss.py
import ImageResource_rc

qss = '''
    QWidget#MainUI{
        border-image: url(:/images/background.png)  no-repeat 0px 0px; 
    }
    
    QPushButton#pushButton_2{
        border-image: url(:/images/small.png);
    }
    QPushButton#pushButton_4{
        border-image: url(:/images/close.png);
    }
    
    
    QLineEdit#lineEdit {
        background: #FFFFFF;
        border: 1px solid #D9D9D9;
        border-radius: 2px;
        font-family: 'Microsoft YaHei';
        font-style: normal;
        font-weight: 400;
        font-size: 12px;
        font-color: #BFBFBF;
    }
    QLineEdit#lineEdit:hover {
        background: rgba(255, 255, 255,1);
        border: 1px solid rgba(24, 144, 255, 1);
        border-radius: 2px;
    }
    QLineEdit#lineEdit:focus {
        background: rgba(255, 255, 255,1);
        border: 1px solid rgba(24, 144, 255, 1);
        border-radius: 2px;
    }
    
    QLabel#label_input,#label_output,#label_FileFype{
        width: 63px;
        height: 22px;
        font-family: 'Microsoft YaHei';
        font-style: normal;
        font-weight: 700;
        font-size: 14px;
        line-height: 22px;
        text-align: right;
        color: #0F1011;
    }
    QLabel#label_bg{
        background: #ECF4FB;
        border-radius: 1px;
    }
    QLabel#label_check{
        font-family: 'Microsoft YaHei';
        font-style: normal;
        font-weight: 400;
        font-size: 12px;
        color: #0F1011;
    }
    
    QPushButton#button_start{
        background: #1890FF;
        border-radius: 2px;
        font-family: 'Microsoft YaHei';
        font-style: normal;
        font-weight: 400;
        font-size: 14px;
        color: #FFFFFF;
    }
    QPushButton#button_start::pressed{
        background: #FFFFFF;
    }
    QPushButton#button_reset{
        background: #1890FF;
        border-radius: 2px;
        font-family: 'Microsoft YaHei';
        font-style: normal;
        font-weight: 400;
        font-size: 14px;
        color: #FFFFFF;
    }
    QPushButton#button_reset::pressed{
        background: #FFFFFF;
    }
    
    
    QCheckBox#checkButton::indicator:unchecked{
        border-image: url(:/images/checkbox1.png)
       
    }
    QCheckBox#checkButton::indicator:checked{
        border-image: url(:/images/checkbox2.png)
       
    }
    
    QTableWidget{
            background: #FFFFFF;
            border: 1px solid #EBEEF0;
            border-radius: 2px;    
        }
        
    QTableWidget::item
    {
        background: #FFFFFF;
        border: 1px solid #EBEEF0;
        color: #666666;
    }
    
    QTableWidget::item::selected
    {
        background: #FFFFFF;
        border: 1px solid #EBEEF0;
        color: #0000FF;
    }
     
    QScrollBar:vertical{    
        width: 2px;
        background: #39E9C9;
        
    } 
    QScrollBar::handle:vertical {
        width: 2px;
        background: #39E9C9;
    }
    
    QScrollBar::add-page:vertical {
        width: 2px;
        background: #FFFFFF;
    }
    QScrollBar::sub-page:vertical {
        width: 2px;
        background: #FFFFFF;
    }
'''

3.表格常用设置：
self.setColumnCount(1)
        self.setRowCount(5)
        self.setFocusPolicy(Qt.NoFocus)
        self.resizeColumnsToContents()
        self.horizontalHeader().setStretchLastSection(True)
        self.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)

        self.horizontalHeader().hide()
        self.verticalHeader().hide()
        self.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.setSelectionMode(QTableWidget.SingleSelection)
        self.setSelectionBehavior(QTableWidget.SelectRows)

4.同时可以选择目录与文件夹
    def mouseDoubleClickEvent(self, QMouseEvent):
        self.lists.clear()
        fileDlg = QFileDialog()
        fileDlg.setFileMode(QFileDialog.DirectoryOnly)
        fileDlg.setOption(QFileDialog.DontUseNativeDialog, True)
        fileDlg.setDirectory("./")
        listView = fileDlg.findChild(QListView, "listView")
        if listView:
            listView.setSelectionMode(QAbstractItemView.ExtendedSelection)
        treeView = fileDlg.findChild(QTreeView, "treeView")
        if treeView:
            treeView.setSelectionMode(QAbstractItemView.ExtendedSelection)
        if fileDlg.exec_():
            folders = fileDlg.selectedFiles()
            for folder in folders:
                if os.path.basename(folder):
                    self.lists.append(folder)
            print(self.lists)

        font = QFont()
        font.setFamily('Microsoft YaHei')
        font.setPixelSize(12)
        sortList = sorted(set(self.lists), key=self.lists.index)
        for index, url in enumerate(sortList):
            if index+1 > self.rowCount():
                self.insertRow(self.rowCount())
            self.itemTwo = QTableWidgetItem(os.path.basename(url))
            # self.itemTwo.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.itemTwo.setFont(font)
            self.setItem(index, 0, self.itemTwo)
            if self.item(index, 0):
                self.item(index, 0).setToolTip(url)

5.自定义常用控件
class NewQLineEdit(QLineEdit):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setAcceptDrops(True)
        self.setDragEnabled(True)

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        urls = [u for u in event.mimeData().urls()]
        for url in urls:
            self.setText(url.path()[1:])

    def mouseDoubleClickEvent(self, QMouseEvent):
        filename_list = QFileDialog.getExistingDirectory(self, '選擇文件夹', './')
        self.setText(str(filename_list))


class MyListWidget(QListWidget):

    def __init__(self, parent: Optional[QWidget] = None) -> None:
        super().__init__(parent)
        # 拖拽设置
        self.setAcceptDrops(True)
        self.setDragEnabled(True)
        self.setDragDropMode(QAbstractItemView.DragDrop)  # 设置拖放
        self.setSelectionMode(QAbstractItemView.ExtendedSelection)  # 设置选择多个
        self.setDefaultDropAction(Qt.CopyAction)

    def dragEnterEvent(self, e: QDragEnterEvent) -> None:
        """（从外部或内部控件）拖拽进入后触发的事件"""
        # print(e.mimeData().text())
        if e.mimeData().hasText():
            if e.mimeData().text().startswith('file:///'):
                e.accept()
        else:
            e.ignore()

    def dragMoveEvent(self, e: QDragMoveEvent) -> None:
        """拖拽移动过程中触发的事件"""
        e.accept()

    def dropEvent(self, e: QDropEvent) -> None:
        """拖拽结束以后触发的事件"""
        paths = e.mimeData().text().split('\n')
        for path in paths:
            path = path.strip()
            if len(path) > 8:
                self.addItem(path.strip()[8:])
        e.accept()



6.文件传输
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Time      : 2022/11/29 上午 08:07
# @Author   : ghost(fan.xia)
# @Email    : ghost.f.xia@mail.foxconn.com
# File      : initialWindow.py
import os.path
import sys

from PyQt5.QtWidgets import QTableWidget, QFileDialog, QTableWidgetItem, QWidget, QLabel, QPushButton, QHeaderView, \
    QStyleOption, QStyle, QApplication, QAbstractItemView
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont, QIcon, QCursor, QPaintEvent, QPainter

from initialWindowQss import qss
from mainWindow import MainWindow
from ReadExcel import ReadExcel
from pyqtThread import EnterThread
import cgitb

cgitb.enable(format='text')


class TableDrag(QTableWidget):
    def __init__(self, parent=None, *args, **kwargs):
        super().__init__(parent, *args, **kwargs)
        self.parent = parent

    def mouseDoubleClickEvent(self, QMouseEvent):
        filenames, _ = QFileDialog.getOpenFileNames(self, "选择文件", '/', '*.xlsx;;*.*')
        font = QFont()
        font.setFamily('Microsoft YaHei')
        font.setPixelSize(18)
        self.parent.lists.extend(filenames)
        sortList = sorted(set(self.parent.lists), key=self.parent.lists.index)
        # self.clearContents()
        for index, url in enumerate(sortList):
            if index+1 > self.rowCount():
                self.insertRow(self.rowCount())
            self.itemOne = QTableWidgetItem(str(index + 1))
            self.itemTwo = QTableWidgetItem(os.path.basename(url))
            self.itemOne.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.itemTwo.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.itemOne.setFont(font)
            self.itemTwo.setFont(font)
            self.setItem(index, 0, self.itemOne)
            self.setItem(index, 1, self.itemTwo)


class InitWindow(QWidget):
    def __init__(self):
        super(InitWindow, self).__init__()
        self.setObjectName('InitWindow')
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAutoFillBackground(True)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setWindowIcon(QIcon(':/images/img.png'))
        self.setFixedSize(480, 600)
        self.setStyleSheet(qss)
        self.m_drag = True
        self.initUi()

    def initUi(self):
        self.titleLabel = QLabel(self)
        self.titleLabel.setObjectName('titleLabel')
        self.titleLabel2 = QLabel(self)
        self.titleLabel2.setObjectName('titleLabel2')

        # self.logoLabel = QLabel(self)
        # self.logoLabel.setObjectName('logoLabel')

        self.button_close = QPushButton(self)
        self.button_close.setObjectName('button_close')
        self.button_zrpz = QPushButton('载入配置', self)
        self.button_zrpz.setObjectName('button_zrpz')
        self.button_close.clicked.connect(self.close)
        self.button_zrpz.clicked.connect(self.enter)


        self.table_widget = TableDrag(self)
        self.table_widget.setColumnCount(2)
        self.table_widget.setRowCount(11)
        self.table_widget.setHorizontalHeaderLabels(
            ["序号", "文件"])
        self.table_widget.setFocusPolicy(Qt.NoFocus)
        self.table_widget.resizeColumnsToContents()
        self.table_widget.horizontalHeader().setStretchLastSection(True)
        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_widget.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.table_widget.verticalHeader().setStretchLastSection(True)
        self.table_widget.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_widget.verticalHeader().setVisible(False)
        self.table_widget.horizontalHeader().setFixedHeight(42)
        self.table_widget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.table_widget.setSelectionMode(QTableWidget.SingleSelection)
        self.table_widget.setSelectionBehavior(QTableWidget.SelectRows)

        self.table_widget.cellPressed.connect(self.getPosContent)

        self.readEx = ReadExcel()
        self.lists = self.readEx.get_current_directory_file()
        font = QFont()
        font.setFamily('Microsoft YaHei')
        font.setPixelSize(18)
        for index, value in enumerate(self.lists):
            self.itemOne = QTableWidgetItem(str(index + 1))
            self.itemTwo = QTableWidgetItem(os.path.basename(value))
            self.itemOne.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.itemTwo.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.itemOne.setFont(font)
            self.itemTwo.setFont(font)
            self.table_widget.setItem(index, 0, self.itemOne)
            self.table_widget.setItem(index, 1, self.itemTwo)

        self.label_message = QLabel('请双击选择文件', self)
        self.label_message.setObjectName('label_message')

    def getPosContent(self, row, col):
        self.content = []
        if self.table_widget.item(row, col):
            self.contents = self.table_widget.item(row, col).text()
            for value in self.lists:
                if os.path.basename(value) == self.contents:
                    self.content.append(value)
            self.updateMessage(self.content)

    def updateMessage(self, urlList):
        result = self.readEx.check_file(urlList)
        for key, value in result.items():
            if value:
                self.errorMessage(value)
            else:
                self.rightMessage()


    def errorMessage(self, message):
        '''格式错误时调用'''
        self.label_message.setText(message)
        self.label_message.setStyleSheet('''QLabel#label_message{
            font-family: 'Microsoft YaHei';
            font-style: normal;
            font-weight: 700;
            font-size: 15px;
            color: #DE4142;
         }''')
        self.button_zrpz.setDisabled(True)
        self.button_zrpz.setStyleSheet('''QPushButton#button_zrpz{
            background: #DE4142;
            border: 2px solid #FFFFFF;
            border-radius: 20px;
            font-family: 'Microsoft YaHei';
            font-style: normal;
            font-weight: 700;
            font-size: 22px;
            color: #FFFFFF;
        }''')

    def rightMessage(self):
        self.label_message.setText('')
        self.label_message.setStyleSheet('''QLabel#label_message{
            font-family: 'Microsoft YaHei';
            font-style: normal;
            font-weight: 700;
            font-size: 26px;
            color: #4545F2;
         }''')
        self.button_zrpz.setDisabled(False)
        self.button_zrpz.setStyleSheet('''QPushButton#button_zrpz{
            background: #8888FF;
            border: 2px solid #FFFFFF;
            border-radius: 20px;
            font-family: 'Microsoft YaHei';
            font-style: normal;
            font-weight: 700;
            font-size: 22px;
            color: #FFFFFF;
        }''')

    def enter(self):
        '''载入配置'''
        self.hide()
        self.mainWindow = MainWindow(self)
        self.enter_thread = EnterThread(self)
        self.enter_thread.start()
        self.enter_thread.result_signal.connect(self.dataInit)

    def dataInit(self, data):
        #self.urlList = []
        #self.numList = []
        # for url in data:
        #     self.urlList.append(url)
        #print(self.urlList)
        #print(data)
        self.valueList = []
        for val in data.values():
            #self.numList.append(len(val))
            #print(val)
            self.valueList.extend(val)
        #print(valueList)
        for index, value in enumerate(self.valueList):
            if index+1 > self.mainWindow.table_widget.rowCount():
                self.mainWindow.table_widget.insertRow(self.mainWindow.table_widget.rowCount())
            self.itemOne1 = QTableWidgetItem(str(index + 1))
            self.itemTwo1 = QTableWidgetItem(str(value[0]))
            self.itemThree1 = QTableWidgetItem(str(value[1]))
            self.itemFour1 = QTableWidgetItem(str(value[2]))
            self.itemFive1 = QTableWidgetItem(str(value[3]))
            self.itemSix1 = QTableWidgetItem(str(value[4]))
            self.mainWindow.table_widget.setItem(index, 0, self.itemOne1)
            self.mainWindow.table_widget.setItem(index, 1, self.itemTwo1)
            self.mainWindow.table_widget.setItem(index, 2, self.itemThree1)
            self.mainWindow.table_widget.setItem(index, 3, self.itemFour1)
            self.mainWindow.table_widget.setItem(index, 4, self.itemFive1)
            self.mainWindow.table_widget.setItem(index, 5, self.itemSix1)
            self.mainWindow.table_widget.setItem(index, 6, QTableWidgetItem('待传输'))
            self.mainWindow.table_widget.repaint()

    def on_minimiz_clicked(self):
        self.showMinimized()

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.m_drag = True
            self.m_DragPosition = event.globalPos() - self.pos()
            event.accept()
            self.setCursor(QCursor(Qt.OpenHandCursor))

    def mouseMoveEvent(self, QMouseEvent):
        if Qt.LeftButton and self.m_drag:
            self.move(QMouseEvent.globalPos() - self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag = False
        self.setCursor(QCursor(Qt.ArrowCursor))

    def paintEvent(self, a0: QPaintEvent) -> None:
        opt = QStyleOption()
        opt.initFrom(self)
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        self.style().drawPrimitive(QStyle.PE_Widget, opt, painter, self)

    def resizeEvent(self, QResizeEvent):
        self.titleLabel.setGeometry(0, 0, 480, 76)
        self.titleLabel2.setGeometry(283, 486, 189, 113)
        self.button_close.setGeometry(448, 20, 17, 16)
        self.button_zrpz.setGeometry(120, 528, 240, 40)
        self.table_widget.setGeometry(15, 68, 450, 446)
        #self.logoLabel.setGeometry(9, 69, 462, 462)
        self.label_message.setGeometry(150, 274, 400, 35)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    tree = InitWindow()
    tree.show()
    sys.exit(app.exec_())


#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Time      : 2022/11/29 上午 08:08
# @Author   : ghost(fan.xia)
# @Email    : ghost.f.xia@mail.foxconn.com
# File      : mainWindow.py


import sys
from PyQt5.QtWidgets import QTableWidget, QWidget, QLabel, QPushButton, QHeaderView, \
    QStyleOption, QStyle, QApplication, QAbstractItemView, QTableWidgetItem
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont, QIcon, QCursor, QPaintEvent, QPainter

from ReadExcel import ReadExcel
from mainWindowQss import qss1, qss2
from pyqtThread import SaveThread, StartThread, EnterThread


class MainWindow(QWidget):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__()
        self.parent = parent
        self.setObjectName('MainWindow')
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAutoFillBackground(True)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setWindowIcon(QIcon(':/images/img.png'))
        self.m_drag = True
        self.initUi()
        self.show()

    def initUi(self):
        self.titleLabel = QLabel(self)
        self.titleLabel.setObjectName('titleLabel')
        self.titleLabel2 = QLabel(self)
        self.titleLabel2.setObjectName('titleLabel2')
        self.button_hide = QPushButton(self)
        self.button_expand = QPushButton(self)
        self.button_close = QPushButton(self)
        self.button_cxxzpz = QPushButton('重新选择配置', self)
        self.button_sxpz = QPushButton('刷新配置', self)
        self.button_bcpz = QPushButton('保存配置', self)
        self.button_cscs = QPushButton('开始传输', self)
        self.button_hide.setObjectName('button_hide')
        self.button_expand.setObjectName('button_expand')
        self.button_close.setObjectName('button_close')
        self.button_cxxzpz.setObjectName('button_cxxzpz')
        self.button_sxpz.setObjectName('button_sxpz')
        self.button_bcpz.setObjectName('button_bcpz')
        self.button_cscs.setObjectName('button_cscs')
        self.button_cscs.setDisabled(True)
        self.button_hide.clicked.connect(self.on_minimiz_clicked)
        self.button_close.clicked.connect(self.close)
        self.button_cxxzpz.clicked.connect(self.chooseConfigAg)
        self.button_sxpz.clicked.connect(self.refreshConfig)
        self.button_bcpz.clicked.connect(self.saveConfig)
        self.button_cscs.clicked.connect(self.startTransmission)

        # self.logoLabel = QLabel(self)
        # self.logoLabel.setObjectName('logoLabel')

        self.table_widget = QTableWidget(self)
        self.table_widget.setObjectName('table')
        self.table_widget.setColumnCount(7)
        self.table_widget.setHorizontalHeaderLabels(
            ["序号", "本地文件/文件夹", "IP", "登录账户", "登录密码", "传输位置", "状态"])

        self.table_widget.setFocusPolicy(Qt.NoFocus)
        self.table_widget.resizeColumnsToContents()
        self.table_widget.horizontalHeader().setStretchLastSection(True)
        self.table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_widget.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.table_widget.verticalHeader().setStretchLastSection(True)
        self.table_widget.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table_widget.verticalHeader().setVisible(False)
        self.table_widget.horizontalHeader().setFixedHeight(50)
        # self.table_widget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.table_widget.setSelectionMode(QTableWidget.SingleSelection)
        self.table_widget.setSelectionBehavior(QTableWidget.SelectRows)

        # self.table_widget.itemSelectionChanged.connect(self.setItemFont)

    # def setItemFont(self):
    #     items = self.table_widget.selectedItems()
    #     for item in items:
    #         item.setFont(self.font)
    #         item.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)

    def refreshConfig(self):
        '''刷新配置'''
        result = ReadExcel().read_excel(self.parent.content)
        self.parent.dataInit(result)

    def saveConfig(self):
        '''保存配置'''
        self.save_thread = SaveThread(self)
        self.save_thread.start()
        self.save_thread.result_signal.connect(self.getDataConfig)

        for i in range(self.table_widget.rowCount()):
            for g in range(self.table_widget.columnCount()):
                if self.table_widget.item(i, g):
                    self.table_widget.item(i, g).setFont(self.font)
                    self.table_widget.item(i, g).setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)

    def getDataConfig(self, data):
        self.dataConfig = data
        self.button_cscs.setDisabled(False)
        #print(self.dataConfig)

    def startTransmission(self):
        '''开始传输'''
        self.Start_Thread = StartThread(self)
        self.Start_Thread.start()
        # self.Start_Thread.result_signal.connect(self.updateStatus)

    def updateStatus(self, status):
        for index, sta in enumerate(status):
            self.table_widget.setItem(index, 6, QTableWidgetItem(str(sta)))
            self.table_widget.item(index, 6).setFont(self.font)
            self.table_widget.item(index, 6).setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.table_widget.update()

    def updateStatus2(self):
        for index in range(len(self.parent.valueList)):
            self.table_widget.setItem(index, 6, QTableWidgetItem(str('传输中')))
            self.table_widget.item(index, 6).setFont(self.font)
            self.table_widget.item(index, 6).setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.table_widget.update()

    def chooseConfigAg(self):
        '''重新选择配置'''
        self.close()
        self.parent.show()

    def on_minimiz_clicked(self):
        self.showMinimized()

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.m_drag = True
            self.m_DragPosition = event.globalPos() - self.pos()
            event.accept()
            self.setCursor(QCursor(Qt.OpenHandCursor))

    def mouseMoveEvent(self, QMouseEvent):
        if Qt.LeftButton and self.m_drag:
            self.move(QMouseEvent.globalPos() - self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag = False
        self.setCursor(QCursor(Qt.ArrowCursor))

    def paintEvent(self, a0: QPaintEvent) -> None:
        opt = QStyleOption()
        opt.initFrom(self)
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        self.style().drawPrimitive(QStyle.PE_Widget, opt, painter, self)

    def resizeEvent(self, QResizeEvent):
        self.desktop = QApplication.desktop()
        self.screenRect = self.desktop.screenGeometry()
        self.height = self.screenRect.height()
        self.width = self.screenRect.width()
        if self.width >= 1920 and self.height >= 1080:
            self.setMinimumSize(1390, 750)
            self.table_widget.setRowCount(10)
            self.font = QFont()
            self.font.setFamily('Microsoft YaHei')
            self.font.setPixelSize(20)
            self.setStyleSheet(qss1)
            self.titleLabel.setGeometry(0, 0, 1390, 77)
            self.titleLabel2.setGeometry(29, 0, 1333, 90)
            self.button_hide.setGeometry(1243, 34, 20, 2)
            self.button_expand.setGeometry(1298, 25, 20, 20)
            self.button_close.setGeometry(1353, 27, 17, 16)
            self.button_cxxzpz.setGeometry(1005, 83, 180, 40)
            self.button_sxpz.setGeometry(1205, 83, 170, 40)
            self.button_bcpz.setGeometry(560, 679, 150, 40)
            self.button_cscs.setGeometry(730, 679, 150, 40)
            self.table_widget.setGeometry(13, 129, 1364, 530)
            #self.logoLabel.setGeometry(373, 77, 643, 643)

        else:
            self.setMinimumSize(1136, 544)
            self.table_widget.setRowCount(8)
            self.font = QFont()
            self.font.setFamily('Microsoft YaHei')
            self.font.setPixelSize(18)
            self.setStyleSheet(qss2)
            self.titleLabel.setGeometry(0, 0, 1136, 56)
            self.titleLabel2.setGeometry(28, 1, 1082, 80)
            self.button_hide.setGeometry(991, 26, 20, 2)
            self.button_expand.setGeometry(1048, 20, 20, 20)
            self.button_close.setGeometry(1100, 21, 17, 16)
            self.button_cxxzpz.setGeometry(782, 65, 160, 36)
            self.button_sxpz.setGeometry(962, 65, 160, 36)
            self.button_bcpz.setGeometry(428, 483, 130, 36)
            self.button_cscs.setGeometry(578, 483, 130, 36)
            self.table_widget.setGeometry(13, 111, 1111, 362)
            #self.logoLabel.setGeometry(333, 64, 471, 471)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    tree = MainWindow()
    tree.show()
    sys.exit(app.exec_())

7.常用qss
qss = '''
    QWidget#MainUI {
        border-image: url(:/images/DesenseOtaReport.png) no-repeat 0px 0px;
    }
    QWidget#prospect {
        border-image: url(:/images/Rectangle15.png) no-repeat 0px 0px;
    }
    QLabel#title {
        color: rgba(255,255,255,1);
        font-size: 12px;
        font-weight: 400;
    }
    QLabel#department_label {
        border-image: url(:/images/department.png) no-repeat 0px 0px;
    }
    QPushButton#mini_btn {
        border-image: url(:/images/minimize.png) no-repeat 0px 0px;
    }
    QPushButton#maxmin_btn {
        border-image: url(:/images/Frame4.png) no-repeat 0px 0px;
    }
    QPushButton#close_btn {
        border-image: url(:/images/close.png) no-repeat 0px 0px;
    }
    QLabel#prospect_text {
        color: rgba(18,35,53,1);
        font-size: 14px;
        font-weight: 700;
    }
    QLineEdit#prospect_edit {
        background: rgba(255, 255, 255,1);
        border: 2px solid rgba(217, 217, 217,1);
        border-radius: 2px;
        font-size: 12px;
        font-color: rgba(18,35,53,1);
        padding-top: 5px;
        padding-left: 12px;
        padding-right: 12px;
        padding-bottom: 5px;
    }
    QLineEdit#prospect_edit:hover {
        background: rgba(255, 255, 255,1);
        border: 2px solid rgba(24, 144, 255, 1);
        border-radius: 2px;
    }
    QLineEdit#prospect_edit:focus {
        background: rgba(255, 255, 255,1);
        border: 2px solid rgba(24, 144, 255, 1);
        border-radius: 2px;
    }
    QCheckBox#checkbok {
        color: rgba(18, 35, 53, 1);
        font-size: 12px;
    }
    QCheckBox#checkbok:indicator:unchecked {
        image: url(:/images/uncheckbox-input.png);
    }
    QCheckBox#checkbok:indicator:checked {
        image: url(:/images/checkbox-input.png);
    }
    QComboBox#combox {
        border: 2px solid rgba(217,217,217,1);
        border-radius: 2px;
        background: rgba(255, 255, 255, 1);
        color: rgba(0, 0, 0, 1);
        padding-top: 5px;
        padding-left: 12px;
        padding-right: 12px;
        padding-bottom: 5px;
    }
    QComboBox#combox::down-arrow {
        image: url(:/images/comBox.png);
    }
    QComboBox#combox:on {
        border: 2px solid rgba(24, 144, 255, 1);
        color: rgba(0, 0, 0, 1);
    }
    QComboBox#combox:hover {
        border: 2px solid rgba(24, 144, 255, 1);
    }
    QComboBox#combox::drop-down {
        border: 0px;
        padding-right: 15px;
    }
    QPushButton#run_btn {
        border: 0px;
        background: rgba(24, 144, 255, 1);
        color: rgba(255, 255, 255, 1);
        font-size: 14px;
        border-radius: 2px;
    }
    QPushButton#run_btn:pressed {
        border: 0px;
        background: rgba(217, 217, 217, 1);
        color: rgba(191, 191, 191, 1);
    }
    QPushButton#reset_btn {
        border: 0px;
        background: rgba(24, 144, 255, 1);
        color: rgba(255, 255, 255, 1);
        font-size: 14px;
        border-radius: 2px;
    }
    QPushButton#reset_btn:pressed { 
        border: 0px;
        background: rgba(217, 217, 217, 1);
        color: rgba(191, 191, 191, 1);
    }
    QLabel#message {
        color: rgba(191, 191, 191, 1);
        font-size: 11px;
    }
'''

8.qrc文件
<RCC>
  <qresource prefix="/">
    <file>images/background.png</file>
    <file>images/close.png</file>
    <file>images/small.png</file>
    <file>images/img.png</file>
    <file>images/checkbox1.png</file>
    <file>images/checkbox2.png</file>
  </qresource>
</RCC>


8.区域滑轮
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Time      : 2022/9/6 下午 03:32
# @Author   : ghost(fan.xia)
# @Email    : ghost.f.xia@mail.foxconn.com
# File      : widgetDesign.py
import math
import sys
from PyQt5 import Qt
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import calibrationQss


class Widgets(QWidget):
    def __init__(self, parent=None):
        super(Widgets, self).__init__(parent)
        self.parent = parent
        self.addList = []
        self.setObjectName('widgets')
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setMinimumSize(658, 701)
        self.setStyleSheet(calibrationQss.qss)
        # self.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        self.initUi()

    def initUi(self):
        self.lineLabel = QLabel(self)
        self.lineLabel.setObjectName('lineLabel')
        self.numLabel = QLabel(self)
        self.numLabel.setObjectName('numLabel')
        self.label = QLabel('Profile Path', self)
        self.label.setObjectName('label')
        self.lineEdit = QLineEdit(self)
        self.lineEdit.setObjectName('lineEdit3')
        self.pushButton1 = QPushButton(self)
        self.pushButton2 = QPushButton(self)
        self.pushButton3 = QPushButton(self)
        self.pushButton4 = QPushButton('LOAD', self)
        self.pushButton1.setObjectName('button1')
        self.pushButton2.setObjectName('button2')
        self.pushButton3.setObjectName('button3')
        self.pushButton4.setObjectName('button4')
        self.pushButton1.clicked.connect(self.addMaker)
        self.pushButton3.clicked.connect(self.reset)
        self.initRightWidget()
        self.initLeftWidget()

    def initLeftWidget(self):
        self.widgetLeft = QWidget(self)
        self.label1 = QLabel('GPIB PORT', self.widgetLeft)
        self.label2 = QLabel('Mode', self.widgetLeft)
        self.label3 = QLabel('S-Parameter', self.widgetLeft)
        self.label4 = QLabel('Format', self.widgetLeft)
        self.label5 = QLabel('Start Frequency', self.widgetLeft)
        self.label6 = QLabel('Start Frequency', self.widgetLeft)
        self.label7 = QLabel('Sweep', self.widgetLeft)
        self.label8 = QLabel('Calibrate port', self.widgetLeft)
        self.label1.setObjectName('label')
        self.label2.setObjectName('label')
        self.label3.setObjectName('label')
        self.label4.setObjectName('label')
        self.label5.setObjectName('label')
        self.label6.setObjectName('label')
        self.label7.setObjectName('label')
        self.label8.setObjectName('label')
        self.lineEdit1 = QLineEdit(self.widgetLeft)
        self.lineEdit2 = QLineEdit(self.widgetLeft)
        self.lineEdit3 = QLineEdit(self.widgetLeft)
        self.lineEdit4 = QLineEdit(self.widgetLeft)
        self.lineEdit5 = QLineEdit(self.widgetLeft)
        self.lineEdit6 = QLineEdit(self.widgetLeft)
        self.lineEdit7 = QLineEdit(self.widgetLeft)
        self.lineEdit8 = QLineEdit(self.widgetLeft)
        self.lineEdit1.setObjectName('lineEdit')
        self.lineEdit2.setObjectName('lineEdit')
        self.lineEdit3.setObjectName('lineEdit')
        self.lineEdit4.setObjectName('lineEdit')
        self.lineEdit5.setObjectName('lineEdit')
        self.lineEdit6.setObjectName('lineEdit')
        self.lineEdit7.setObjectName('lineEdit')
        self.lineEdit8.setObjectName('lineEdit')
        self.lineEdit.setPlaceholderText('D:\MLB Coex\Pathloss.txt')
        self.lineEdit1.setPlaceholderText('20')
        self.lineEdit2.setPlaceholderText('Trcl')
        self.lineEdit3.setPlaceholderText('S21')
        self.lineEdit4.setPlaceholderText('MLOGarithmic')
        self.lineEdit5.setPlaceholderText('600MHz')
        self.lineEdit6.setPlaceholderText('8GHz')
        self.lineEdit7.setPlaceholderText('1601')
        self.lineEdit8.setPlaceholderText('1,2')
        self.formLayout1 = QFormLayout(self.widgetLeft)
        self.formLayout1.addRow(self.label1, self.lineEdit1)
        self.formLayout1.addRow(self.label2, self.lineEdit2)
        self.formLayout1.addRow(self.label3, self.lineEdit3)
        self.formLayout1.addRow(self.label4, self.lineEdit4)
        self.formLayout1.addRow(self.label5, self.lineEdit5)
        self.formLayout1.addRow(self.label6, self.lineEdit6)
        self.formLayout1.addRow(self.label7, self.lineEdit7)
        self.formLayout1.addRow(self.label8, self.lineEdit8)
        self.formLayout1.setLabelAlignment(Qt.AlignRight)
        self.formLayout1.setVerticalSpacing(15)
        self.widgetLeft.setLayout(self.formLayout1)

    def initRightWidget(self):
        self.widgetRight = QWidget(self)
        self.label9 = QLabel('Maker1', self.widgetRight)
        self.label10 = QLabel('Maker2', self.widgetRight)
        self.label11 = QLabel('Maker3', self.widgetRight)
        self.label12 = QLabel('Maker4', self.widgetRight)
        self.label13 = QLabel('Maker5', self.widgetRight)
        self.label9.setObjectName('label')
        self.label10.setObjectName('label')
        self.label11.setObjectName('label')
        self.label12.setObjectName('label')
        self.label13.setObjectName('label')
        self.lineEdit9 = QLineEdit(self.widgetRight)
        self.lineEdit10 = QLineEdit(self.widgetRight)
        self.lineEdit11 = QLineEdit(self.widgetRight)
        self.lineEdit12 = QLineEdit(self.widgetRight)
        self.lineEdit13 = QLineEdit(self.widgetRight)
        self.lineEdit9.setObjectName('lineEdit2')
        self.lineEdit10.setObjectName('lineEdit2')
        self.lineEdit11.setObjectName('lineEdit2')
        self.lineEdit12.setObjectName('lineEdit2')
        self.lineEdit13.setObjectName('lineEdit2')
        self.lineEdit9.setPlaceholderText('960MHz')
        self.lineEdit10.setPlaceholderText('2.4GHz')
        self.lineEdit11.setPlaceholderText('5.2GHz')
        self.lineEdit12.setPlaceholderText('6.8GHz')
        self.lineEdit13.setPlaceholderText('7.9GHz')
        self.formLayout2 = QFormLayout(self.widgetRight)
        self.formLayout2.addRow(self.label9, self.lineEdit9)
        self.formLayout2.addRow(self.label10, self.lineEdit10)
        self.formLayout2.addRow(self.label11, self.lineEdit11)
        self.formLayout2.addRow(self.label12, self.lineEdit12)
        self.formLayout2.addRow(self.label13, self.lineEdit13)
        self.formLayout2.setLabelAlignment(Qt.AlignRight)
        self.formLayout2.setVerticalSpacing(15)
        self.widgetRight.setLayout(self.formLayout2)

    def addMaker(self):
        self.count = self.formLayout2.count()
        # if int(self.count / 2) == 8:
        #     self.pushButton1.move(454, 544)

        if int(self.count / 2) < 9:
            self.labelAdd = QLabel('Maker' + str(int(self.count / 2 + 1)), self.widgetRight)
            self.labelAdd.setObjectName('label')
            self.lineEditAdd = QLineEdit(self.widgetRight)
            self.lineEditAdd.setObjectName('lineEdit')
            self.addList.append(self.lineEditAdd)
            self.formLayout2.addRow(self.labelAdd, self.lineEditAdd)
        else:
            self.pushButton1.hide()

    def reset(self):
        self.lineEdit.clear()
        self.lineEdit1.clear()
        self.lineEdit2.clear()
        self.lineEdit3.clear()
        self.lineEdit4.clear()
        self.lineEdit5.clear()
        self.lineEdit6.clear()
        self.lineEdit7.clear()
        self.lineEdit8.clear()
        self.lineEdit9.clear()
        self.lineEdit10.clear()
        self.lineEdit11.clear()
        self.lineEdit12.clear()
        self.lineEdit13.clear()
        for editAdd in self.addList:
            editAdd.clear()

    def paintEvent(self, a0: QPaintEvent) -> None:
        opt = QStyleOption()
        opt.initFrom(self)
        painter = QPainter(self)
        self.style().drawPrimitive(QStyle.PE_Widget, opt, painter, self)

    def resizeEvent(self, QResizeEvent):
        self.lineLabel.setGeometry(367, 110, 2, 402)
        self.numLabel.setGeometry(52, 0.4, 41, 36)
        self.widgetRight.setGeometry(384, 100, 244, 370)
        self.widgetLeft.setGeometry(21, 100, 329, 370)
        self.label.setGeometry(55, 47, 103, 20)
        self.lineEdit.setGeometry(148, 40, 382, 30)
        self.pushButton1.setGeometry(454, 484, 128, 30)
        self.pushButton2.setGeometry(153, 585, 174, 42)
        self.pushButton3.setGeometry(366, 585, 174, 42)
        self.pushButton4.setGeometry(540, 41, 76, 30)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.m_drag = True
            self.m_DragPosition = event.globalPos() - self.pos()
            event.accept()
            self.setCursor(QCursor(Qt.OpenHandCursor))

    def mouseMoveEvent(self, QMouseEvent):
        if Qt.LeftButton and self.m_drag:
            self.move(QMouseEvent.globalPos() - self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag = False
        self.setCursor(QCursor(Qt.ArrowCursor))


class Widgets2(QWidget):
    def __init__(self, parent=None):
        super(Widgets2, self).__init__(parent)
        self.parent = parent
        self.setObjectName('widgets2')
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setMinimumSize(658, 701)
        self.setStyleSheet(calibrationQss.qss)
        self.initUi()

    def initUi(self):
        self.numLabel2 = QLabel(self)
        self.numLabel2.setObjectName('numLabel')
        self.pushButton = QPushButton(self)
        self.pushButton.setObjectName('pushButton_1')
        self.pushButton.clicked.connect(self.addWidget)

    def addWidget(self):
        print(self.parent.widgetLists)
        widgetOne = Widgets(self.parent)
        widgetTwo = Widgets2(self.parent)

        if int(len(self.parent.widgetLists) % 2) == 0:
            widgetOne.numLabel.setText(str(len(self.parent.widgetLists)))
            widgetTwo.numLabel2.setText(str(len(self.parent.widgetLists)+1))
            self.parent.layoutxf.addWidget(widgetTwo, (len(self.parent.widgetLists) // 2), 0)
            self.parent.layoutxf.addWidget(widgetOne, (len(self.parent.widgetLists) // 2)-1, 1)
            print(math.ceil(len(self.parent.widgetLists) // 2))
        else:
            widgetOne.numLabel.setText(str(len(self.parent.widgetLists)))
            widgetTwo.numLabel2.setText(str(len(self.parent.widgetLists) + 1))
            self.parent.layoutxf.addWidget(widgetTwo, (math.ceil(len(self.parent.widgetLists) / 2))-1, 1)
            self.parent.layoutxf.addWidget(widgetOne, (math.ceil(len(self.parent.widgetLists) / 2))-1, 0)

        self.parent.widgetLists.append(1)

    def paintEvent(self, a0: QPaintEvent) -> None:
        opt = QStyleOption()
        opt.initFrom(self)
        painter = QPainter(self)
        self.style().drawPrimitive(QStyle.PE_Widget, opt, painter, self)

    def resizeEvent(self, QResizeEvent):
        self.pushButton.setGeometry(297, 289, 82, 82)
        self.numLabel2.setGeometry(56,0.4,41,36)


class WidgetsVna(QWidget):
    def __init__(self, parent=None):
        super(WidgetsVna, self).__init__(parent)
        self.parent = parent
        self.setObjectName('widgetsVna')
        self.widgetOne = Widgets(self)
        self.widgetTwo = Widgets2(self)
        self.widgetLists = [self.widgetOne, self.widgetTwo]
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        #self.setMinimumSize(1390, 750)
        self.setStyleSheet(calibrationQss.qss)
        self.initUi()

    def initUi(self):
        self.layoutxf = QGridLayout()
        self.widgetLists[0].numLabel.setText('1')
        self.widgetLists[1].numLabel2.setText('2')
        self.layoutxf.addWidget(self.widgetLists[0], 0, 0)
        self.layoutxf.addWidget(self.widgetLists[1], 0, 1)
        self.setLayout(self.layoutxf)

    def paintEvent(self, a0: QPaintEvent) -> None:
        opt = QStyleOption()
        opt.initFrom(self)
        painter = QPainter(self)
        self.style().drawPrimitive(QStyle.PE_Widget, opt, painter, self)

    # def resizeEvent(self, QResizeEvent):
    #     self.scrollBar.setGeometry(1382,137,6,230)
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.m_drag = True
            self.m_DragPosition = event.globalPos() - self.pos()
            event.accept()
            self.setCursor(QCursor(Qt.OpenHandCursor))

    def mouseMoveEvent(self, QMouseEvent):
        if Qt.LeftButton and self.m_drag:
            self.move(QMouseEvent.globalPos() - self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag = False
        self.setCursor(QCursor(Qt.ArrowCursor))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    tree = WidgetsVna()
    tree.show()
    sys.exit(app.exec_())


